#!/bin/bash
# Made with ✨ Magic ©️ Nur Mukhammad Agus (https://github.com/madfxr), 2024. Free and Open Source Software (FOSS)
# Vulnerability: https://github.com/google/security-research/blob/master/pocs/linux/kernelctf/CVE-2024-26581_lts_cos_mitigation/docs/vulnerability.md
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
WHITE='\033[0;97m'
NC='\033[0m' # No Color

os_name=""
os_version=""
kernel_version=""
nftables_status=""
nft_list_tables=""
nft_set_rbtree_status=""
affected_status=""

cvss_score="7.8 High"
cve_id="https://app.opencve.io/cve/CVE-2024-26581"

echo -e "${YELLOW}
 ██████╗██╗   ██╗███████╗    ██████╗  ██████╗ ██████╗ ██╗  ██╗      ██████╗  ██████╗ ███████╗ █████╗  ██╗
██╔════╝██║   ██║██╔════╝    ╚════██╗██╔═████╗╚════██╗██║  ██║      ╚════██╗██╔════╝ ██╔════╝██╔══██╗███║
██║     ██║   ██║█████╗█████╗ █████╔╝██║██╔██║ █████╔╝███████║█████╗ █████╔╝███████╗ ███████╗╚█████╔╝╚██║
██║     ╚██╗ ██╔╝██╔══╝╚════╝██╔═══╝ ████╔╝██║██╔═══╝ ╚════██║╚════╝██╔═══╝ ██╔═══██╗╚════██║██╔══██╗ ██║
╚██████╗ ╚████╔╝ ███████╗    ███████╗╚██████╔╝███████╗     ██║      ███████╗╚██████╔╝███████║╚█████╔╝ ██║
 ╚═════╝  ╚═══╝  ╚══════╝    ╚══════╝ ╚═════╝ ╚══════╝     ╚═╝      ╚══════╝ ╚═════╝ ╚══════╝ ╚════╝  ╚═╝
                           ✦✦✦ VULNERABILITY CHECKER FOR BGN INTERNAL ✦✦✦

${NC}"

detect_distro() {
    echo -e "${YELLOW}[DEBUG] Display OS Information...${NC}"
    release_files=(/etc/*release)

    if [ ${#release_files[@]} -gt 0 ]; then
        for file in "${release_files[@]}"; do
            if [ -f "$file" ]; then
                while IFS= read -r line; do
                    if [[ "$line" =~ ^NAME= ]]; then
                        os_name=$(echo "$line" | cut -d'=' -f2 | tr -d '"')
                    elif [[ "$line" =~ ^VERSION= ]]; then
                        os_version=$(echo "$line" | cut -d'=' -f2 | tr -d '"')
                    fi
                done < "$file"
            fi
        done
        if [ -z "$os_name" ]; then
            os_name="${RED}OS Name Not Found${NC}"
        fi
        if [ -z "$os_version" ]; then
            os_version="${RED}OS Version Not Found${NC}"
        fi
    else
        os_name="${RED}Release File Not Found in /etc${NC}"
        os_version=""
    fi
}

get_kernel_version() {
    echo -e "${YELLOW}[DEBUG] Display the Current Kernel Version...${NC}"
    kernel_version=$(uname -r)
    echo -e "${YELLOW}[DEBUG] Output: $kernel_version${NC}"
}

check_nftables() {
    echo -e "${YELLOW}[DEBUG] Checking the Status of nftables...${NC}"
    if systemctl is-active --quiet nftables; then
        nftables_status="${RED}Active${NC}"
    else
        nftables_status="Inactive"
    fi

    echo -e "${YELLOW}[DEBUG] Display the nftables List Tables...${NC}"
    nft_list_tables=$(nft list tables 2>/dev/null || echo "None")

    echo -e "${YELLOW}[DEBUG] Checking the Kernel Configuration for nftables...${NC}"
    config_file="/boot/config-$(uname -r)"
    if [ -f "$config_file" ]; then
        if grep -i CONFIG_NFT "$config_file" >/dev/null 2>&1; then
            nftables_config_status="Found"
        else
            nftables_config_status="${RED}Not Found${NC}"
        fi
    else
        nftables_config_status="${RED}Kernel Configuration File Not Found${NC}"
    fi
}

check_nft_set_rbtree() {
    echo -e "${YELLOW}[DEBUG] Checking the Kernel Configuration for nft_set_rbtree...${NC}"
    if [ -f "$config_file" ]; then
        if grep -i CONFIG_NFT_RBTREE "$config_file" >/dev/null 2>&1; then
            nft_set_rbtree_status="${RED}Set${NC}"
        else
            nft_set_rbtree_status="Not Set"
        fi
    else
        nft_set_rbtree_status="${RED}Kernel Configuration File Not Found${NC}"
    fi
}

check_vulnerability() {
    echo -e "${YELLOW}[DEBUG] Checking for Vulnerabilities Based on Kernel Version...${NC}"

    kernel_version=$(uname -r | sed 's/-.*//')
    kernel_major=$(echo "$kernel_version" | cut -d'.' -f1)
    kernel_minor=$(echo "$kernel_version" | cut -d'.' -f2)
    kernel_patch=$(echo "$kernel_version" | cut -d'.' -f3)

    is_vulnerable() {
        local v_major=$1
        local v_minor=$2
        local v_patch=$3

        [ "$kernel_major" -gt "$v_major" ] ||
        ([ "$kernel_major" -eq "$v_major" ] && [ "$kernel_minor" -gt "$v_minor" ]) ||
        ([ "$kernel_major" -eq "$v_major" ] && [ "$kernel_minor" -eq "$v_minor" ] && [ "$kernel_patch" -ge "$v_patch" ])
    }

    if is_vulnerable 6 1 9; then
        affected_status="${RED}Affected (from version 6.1.9 and later)${NC}"
    elif is_vulnerable 5 15 91; then
        affected_status="${RED}Affected (from version 5.15.91 and later)${NC}"
    elif is_vulnerable 5 10 166; then
        affected_status="${RED}Affected (from version 5.10.166 and later)${NC}"
    else
        affected_status="${GREEN}Not Affected${NC}"
    fi
}

echo -e "${GREEN}[DEBUG] Started Checking for CVE-2024-26581...${NC}"
detect_distro
get_kernel_version
check_nftables
check_nft_set_rbtree
check_vulnerability
echo -e "${GREEN}[DEBUG] Checking Completed!${NC}"

echo -e "${YELLOW}[SUMMARY]${NC}"
echo -e "‣ ${WHITE}OS Name:${NC} ${os_name}"
echo -e "‣ ${WHITE}OS Version:${NC} ${os_version}"
echo -e "‣ ${WHITE}Kernel Version:${NC} ${kernel_version}"
echo -e "‣ ${WHITE}nftables Status:${NC} ${nftables_status}"
echo -e "‣ ${WHITE}nftables List Tables:${NC} ${nft_list_tables}"
echo -e "‣ ${WHITE}nft_set_rbtree Status:${NC} ${nft_set_rbtree_status}"
echo -e "‣ ${WHITE}Vulnerability Status:${NC} ${affected_status}"
echo -e "‣ ${WHITE}CVE:${NC} \033]8;;${cve_id}\033\\${cve_id}\033]8;;\033\\"
echo -e "‣ ${WHITE}CVSS Score v3.1:${RED} ${cvss_score}"
